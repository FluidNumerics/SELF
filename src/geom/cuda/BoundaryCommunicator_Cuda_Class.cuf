! BoundaryCommunicator_Cuda_Class.cuf
! 
! Copyright 2017 Joseph Schoonover <joe@fluidnumerics.consulting>, Fluid Numerics LLC
! All rights reserved.
!
! //////////////////////////////////////////////////////////////////////////////////////////////// !


MODULE BoundaryCommunicator_Cuda_Class

! src/geom
USE BoundaryCommunicator_Class

USE cudafor

IMPLICIT NONE



   TYPE, EXTENDS( BoundaryCommunicator ) :: BoundaryCommunicator_Cuda
   
      INTEGER, DEVICE, ALLOCATABLE :: unPackMap_dev(:), extProcIDs_dev(:)
      INTEGER, DEVICE, ALLOCATABLE :: boundaryIDs_dev(:)

      CONTAINS

      PROCEDURE :: Initialize => Initialize_BoundaryCommunicator_Cuda
      PROCEDURE :: Trash      => Trash_BoundaryCommunicator_Cuda
      
      PROCEDURE :: UpdateDevice => UpdateDevice_BoundaryCommunicator_Cuda
      
      PROCEDURE :: ReadPickup => ReadPickup_BoundaryCommunicator_Cuda
      
   END TYPE BoundaryCommunicator_Cuda

   INTEGER, CONSTANT :: nBoundaryFaces_dev
   
 CONTAINS
!
!
!==================================================================================================!
!------------------------------- Manual Constructors/Destructors ----------------------------------!
!==================================================================================================!
!
!
 ATTRIBUTES(Host) SUBROUTINE Initialize_BoundaryCommunicator_Cuda( myBC, nBe )

   IMPLICIT NONE
   CLASS(BoundaryCommunicator_Cuda), INTENT(inout) :: myBC
   INTEGER, INTENT(in)                             :: nBe
   

      nBoundaryFaces_dev = nBe
      PRINT*, 'Initializing boundary communicator on cpu'
      myBC % nBoundaries = nBe

      ALLOCATE( myBC % unPackMap(1:nBe), myBC % extProcIDs(1:nBe) )
      ALLOCATE( myBC % boundaryIDs(1:nBe) )

      myBC % unPackMap   = 0
      myBC % extProcIDs  = 0
      myBC % boundaryIDs = 0
      
      PRINT*, 'Initializing boundary communicator on gpu'
      ALLOCATE( myBC % unPackMap_dev(1:nBe), &
                myBC % extProcIDs_dev(1:nBe), &
                myBC % boundaryIDs_dev(1:nBe) )

      myBC % unPackMap_dev   = 0
      myBC % extProcIDs_dev  = 0
      myBC % boundaryIDs_dev = 0
      
      nBoundaryFaces_dev = nBE

 END SUBROUTINE Initialize_BoundaryCommunicator_Cuda
!
 ATTRIBUTES(Host) SUBROUTINE Trash_BoundaryCommunicator_Cuda( myBC )

   IMPLICIT NONE
   CLASS(BoundaryCommunicator_Cuda), INTENT(inout) :: myBC

      DEALLOCATE( myBC % unPackMap, myBC % extProcIDs, myBC % boundaryIDs )
      DEALLOCATE( myBC % unPackMap_dev, myBC % extProcIDs_dev, myBC % boundaryIDs_dev )

 END SUBROUTINE Trash_BoundaryCommunicator_Cuda
!
!
!==================================================================================================!
!-------------------------------------- FILE I/O ROUTINES -----------------------------------------!
!==================================================================================================!
!
!
 ATTRIBUTES(Host) SUBROUTINE UpdateDevice_BoundaryCommunicator_Cuda( myBC )
   IMPLICIT NONE
   CLASS(BoundaryCommunicator_Cuda), INTENT(inout) :: myBC
   
      PRINT*, 'Updating boundary communicator on gpu'
      myBC % unPackMap_dev   = myBC % unPackMap
      myBC % extProcIDs_dev  = myBC % extProcIDs
      myBC % boundaryIDs_dev = myBC % boundaryIDs
      
 END SUBROUTINE UpdateDevice_BoundaryCommunicator_Cuda
!
 ATTRIBUTES(Host) SUBROUTINE ReadPickup_BoundaryCommunicator_Cuda( myBC, filename )

   IMPLICIT NONE
   CLASS( BoundaryCommunicator_Cuda ), INTENT(inout) :: myBC
   CHARACTER(*), INTENT(in)                          :: filename
  ! LOCAL
   INTEGER       :: i
   INTEGER       :: fUnit
   INTEGER       :: nBe


      !PRINT *, 'S/R ReadPickup : Reading "'//TRIM(filename)//'.bcm"'
      
      OPEN( UNIT   = NEWUNIT(fUnit), &
            FILE   = TRIM(filename)//'.bcm', &
            FORM   ='FORMATTED',&
            ACCESS ='SEQUENTIAL',&
            STATUS ='OLD',&
            ACTION ='READ' )

      READ( fUnit, * ) nBe

      CALL myBC % Initialize( nBe )

      DO i = 1, myBC % nBoundaries

         READ( fUnit, * ) myBC % boundaryIDs(i), &
                          myBC % extProcIDs(i), &
                          myBC % unPackMap(i)

      ENDDO 

      CLOSE(fUnit)
      
      CALL myBC % UpdateDevice( )

 END SUBROUTINE ReadPickup_BoundaryCommunicator_Cuda
!
 END MODULE BoundaryCommunicator_Cuda_Class



