! Element_Cuda_Class.f90
! 
! Copyright 2015 Joseph Schoonover <schoonover.numerics@gmail.com>, The Florida State University
! Copyright 2016 Joseph Schoonover <jschoonover@lanl.gov>, Los Alamos National Laboratory
!
! The SELF and accompanying documentation were produced in part under the 
! support of Florida State University and the National Science Foundation 
! through Grant OCE-1049131 during 2015 and in part under the support of the 
! Center for Nonlinear Studies and the Department of Energy through the 
! LANL/LDRD program in 2016.
!
! Element_Cuda_Class.f90 is part of the Spectral Element Libraries in Fortran (SELF).
! 
! Licensed under the Apache License, Version 2.0 (the "License"); 
! You may obtain a copy of the License at 
!
! http://www.apache.org/licenses/LICENSE-2.0 
!
! Unless required by applicable law or agreed to in writing, software 
! distributed under the License is distributed on an "AS IS" BASIS, 
! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
! See the License for the specific language governing permissions and  
! limitations under the License.
!
! //////////////////////////////////////////////////////////////////////////////////////////////// !


MODULE Element_Cuda_Class
 
! src/common/
USE ModelPrecision
USE ConstantsDictionary

IMPLICIT NONE


   TYPE Element_Cuda
      INTEGER, DEVICE, ALLOCATABLE :: elementID(:)
      INTEGER, DEVICE, ALLOCATABLE :: nodeIDs(:,:)   ! Corner Element_Cuda ID's
      INTEGER, DEVICE, ALLOCATABLE :: neighbors(:,:) ! Element IDs for the neighbors

      CONTAINS
      
      PROCEDURE :: Build => Build_Element_Cuda
      PROCEDURE :: Trash => Trash_Element_Cuda
      
      !PROCEDURE :: UpdateDevice => UpdateDevice_Element_Cuda

   END TYPE Element_Cuda

   INTEGER, CONSTANT :: nElems_dev
   INTEGER, CONSTANT :: nNodePerElem_dev
   INTEGER, CONSTANT :: nNeighbors_dev

 CONTAINS
!
!
!==================================================================================================!
!------------------------------- Manual Constructors/Destructors ----------------------------------!
!==================================================================================================!
!
!
 ATTRIBUTES(Host) SUBROUTINE Build_Element_Cuda( myElement, nElems, elementType )
 
   IMPLICIT NONE
   CLASS( Element_Cuda ), INTENT(out) :: myElement
   INTEGER, INTENT(in)                :: nElems
   INTEGER, INTENT(in)                :: elementType
   
   
      IF( elementType == Quad2D )THEN
         ALLOCATE( myElement % elementID(1:nElems), &
                   myElement % nodeIDs(1:4,1:nElems), &
                   myElement % neighbors(1:4,1:nElems) )
         nNodePerElem_dev = 4
         nNeighbors_dev   = 4
         
      ELSEIF( elementType == Hex3D )THEN
         ALLOCATE( myElement % elementID(1:nElems), &
                   myElement % nodeIDs(1:8,1:nElems), &
                   myElement % neighbors(1:6,1:nElems) )
         nNodePerElem_dev = 8
         nNeighbors_dev   = 6
         
      ELSE
      
         PRINT*, 'Module Element_Cuda_Class.cuf : S/R Build_Element_Cuda : Invalid elementType.'
         STOP 'STOPPING!'
      
      ENDIF
      myElement % nodeIDs   = 0
      myElement % neighbors = 0
      myElement % elementID = 0
      
      nElems_dev = nElems

 END SUBROUTINE Build_Element_Cuda
!
 ATTRIBUTES(Host) SUBROUTINE Trash_Element_Cuda( myElement )
 
   IMPLICIT NONE
   CLASS( Element_Cuda ), INTENT(inout) :: myElement
   
      DEALLOCATE( myElement % elementID, &
                  myElement % nodeIDs, &
                  myElement % neighbors )
                

 END SUBROUTINE Trash_Element_Cuda
!


END MODULE Element_Cuda_Class
