PROGRAM TestNodalStorage_CUDA

 USE ModelPrecision
 USE ConstantsDictionary
 USE Lagrange_Class
 USE Lagrange_Cuda_Class
 USE NodalStorage_Cuda_Class
 USE Timing
 USE cudafor
 
 IMPLICIT NONE
 

 REAL(prec), PARAMETER :: dx = 0.01_prec
 
 TYPE( MultiTimers ) :: timers
 
 REAL(prec), ALLOCATABLE         :: f3D(:,:,:,:), df3d(:,:,:,:,:), df3dEx(:,:,:,:,:)
 REAL(prec), ALLOCATABLE         :: fm(:,:,:,:), fmEx(:,:,:,:)
 REAL(prec), ALLOCATABLE, DEVICE :: f3D_dev(:,:,:,:), df3d_dev(:,:,:,:,:), fm_dev(:,:,:,:)
 REAL(prec)                      :: fErr, x, y, z, x1, y1, z1, memlim
 
 INTEGER :: N, M, nXel, nEl, narg, istat, nXelMax
 INTEGER :: i, j, k, kEl, jEl, iEl, eID, fUnit, iTest, errID
 INTEGER, MANAGED :: nEl_dev
 TYPE( NodalStorage_Cuda ) :: dgstorage
 TYPE(dim3) :: grid, tBlock
 TYPE(cudadeviceprop) :: prop
 CHARACTER(len=32) :: arg


    ! Default command line arguments !
    N    = 7 
    nXel = 50
    narg = COMMAND_ARGUMENT_COUNT( )
    
    ! Get the CUDA device properties of device 0
    istat = cudaGetDeviceProperties(prop, 0)
    memlim = REAL(prop%totalGlobalMem,prec) ! Get the memory limit in Bytes


    IF( narg==2 )THEN
    !//////////////////////////// Read Command Line Arguments ////////////////////////////////////!
    CALL GetArg(1, arg)
    READ( arg, * ) N
    M = N
    CALL GetArg(2, arg)
    READ( arg, * ) nXel
    
    nXelMax = 55 !FLOOR( (1.0_prec/N) *(0.50_prec*memlim/(4*prec))**(1.0_prec/3.0_prec) )
    IF( nXel > nXelMax )THEN
       PRINT*,' Requesting too many elements '
       PRINT*,' Global Memory on GPU ', TRIM(prop % name),' is ',memlim/1024.0_prec/1024.0_prec/1024.0_prec, 'GB'
       PRINT*,' Using nXel = ', nXelMax
       nXel = nXelMax
    ENDIF
    nEl = nXEl*nXEl*nXEl
  
    PRINT*, 'N     =',N
    PRINT*, 'nElem =', nEl
    
    !/////////////////////////////////////////////////////////////////////////////////////////////!
    ENDIF
    
    ALLOCATE( f3D(0:N,0:N,0:N,1:nEl), df3d(1:3,0:N,0:N,0:N,1:nEl), &
              df3dEx(1:3,0:N,0:N,0:N,1:nEl), fm(0:M,0:M,0:M,1:nEl), &
              fmEx(0:M,0:M,0:M,1:nEl) )
    ALLOCATE( f3D_dev(0:N,0:N,0:N,1:nEl), df3d_dev(1:3,0:N,0:N,0:N,1:nEl), &
              fm_dev(0:M,0:M,0:M,1:nEl) )
    

    nEl_dev = nEl
    CALL timers % Build( )
    CALL timers % AddTimer( 'ApplyDerivativeMatrices_3D_CUDA', 1 )
    CALL timers % AddTimer( 'ApplyDerivativeMatrices_3D_Serial', 2 )
    CALL timers % AddTimer( 'ApplyInterpolationMatrices_3D_CUDA', 3 )
    CALL timers % AddTimer( 'ApplyInterpolationMatrices_3D_Serial', 4 )
    CALL timers % AddTimer( 'ApplyDerivativeMatrices_3D_ACC', 5 )
 
    CALL dgStorage % Build( N, M, GAUSS, CG )
    PRINT*,'--------------------------------------------------------------------------------------'
    
    ! Set up the functions to be tested 
    

    ! ////////////////// 3-D ////////////////////// !
    ! Nodal values at the low order quadrature points
    DO kEl = 1, nXel
       z1 = REAL(kEl-1,prec)*dx
       DO jEl = 1, nXel
          y1 = REAL(jEl-1,prec)*dx
          DO iEl = 1, nXel
             x1 = REAL(iEl-1,prec)*dx
             eID = iEl + ( (jEl-1) + (kEl-1)*nXel )*nXel
             DO k = 0, N
                z = z1 + dx/2.0_prec*dgStorage % interp % s(k)
                DO j = 0, N
                   y = y1 + dx/2.0_prec*dgStorage % interp % s(j)
                   DO i = 0, N
                      x = x1 + dx/2.0_prec*dgStorage % interp % s(i)
                      f3D(i,j,k,eID) = (x**2)*(y**2)*(z**2)
                   ENDDO
                ENDDO
             ENDDO
          ENDDO
       ENDDO
    ENDDO
    ! Copy f3D to the device
    f3D_dev = f3D
     
    ! Here we estimate derivatives of the of the function by calculating the derivative of the 
    ! interpolant using the CUDA kernels to apply the Matrices derivative.
    CALL timers % StartTimer( 5 )
    df3d_dev = dgStorage % interp % ApplyDerivativeMatrices_3D_ACC( f3D_dev, nEl )
    CALL timers % StopTimer( 5 ) 

    CALL timers % StartTimer( 4 )
    fm = dgStorage % interp % ApplyInterpolationMatrices_3D( f3D, nEl )
    CALL timers % StopTimer( 4 ) 

    CALL timers % StartTimer( 3 )
    fm_dev = dgStorage % interp % ApplyInterpolationMatrices_3D_Cuda( f3D_dev, nEl_dev )  
    istat = cudaStreamSynchronize( )
    CALL timers % StopTimer( 3 )
    
    CALL timers % StartTimer( 2 )
    df3dEx     = dgStorage % interp % ApplyDerivativeMatrices_3D( f3D, nEl )
    CALL timers % StopTimer( 2 ) 

    CALL timers % StartTimer( 1 )
    df3D_dev = dgStorage % interp % ApplyDerivativeMatrices_3D_Cuda( f3D_dev, nEl_dev )  
    istat = cudaStreamSynchronize( )
    CALL timers % StopTimer( 1 )
    
    CALL timers % Write_MultiTimers( ) 
    !ENDDO

    ! Copy back to host
    df3d = df3d_dev
    fmEx = fm_dev
    
    ! Check for errors
    fErr = 0.0_prec
    DO iEl = 1, nEl
       DO k = 0, N
          DO j = 0, N
             DO i = 0, N
                fErr = fErr + ( fmEx(i,j,k,iEl) - fm(i,j,k,iEl) )**2 
             ENDDO
          ENDDO
       ENDDO
    ENDDO
      
    PRINT*, '------------------------------------------------------------'
    
    print*, 'Interpolation Error :', sqrt(fErr)
    CALL timers % PointToTimer( 3 )
    print*, 'Interpolation Speedup', timers % current % next % accumulatedTime/timers % current % accumulatedTime
    PRINT*, '------------------------------------------------------------'
    PRINT*, '------------------------------------------------------------'
    ! Check for errors
    fErr = 0.0_prec
    DO iEl = 1, nEl
       DO k = 0, N
          DO j = 0, N
             DO i = 0, N
                fErr = fErr + &
                      ( df3dEx(1,i,j,k,iEl) - df3d(1,i,j,k,iEl) )**2 +&
                      ( df3dEx(2,i,j,k,iEl) - df3d(2,i,j,k,iEl) )**2 +&
                      ( df3dEx(3,i,j,k,iEl) - df3d(3,i,j,k,iEl) )**2
             ENDDO
          ENDDO
       ENDDO
    ENDDO
    
    print*, 'Gradient Error :', sqrt(fErr)
    CALL timers % PointToTimer( 1 )
    print*, 'Gradient Speedup', timers % current % next % accumulatedTime/timers % current % accumulatedTime
    PRINT*, '------------------------------------------------------------'
    PRINT*, '------------------------------------------------------------'
    
    CALL dgStorage % Trash( )

    CALL timers % Trash( )
    
    DEALLOCATE( f3D, df3d, df3dEx )
    DEALLOCATE( f3D_dev, df3d_dev )
    
END PROGRAM TestNodalStorage_CUDA
